# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'

vars:
  D: ""
  RUN: '{{if eq .D ""}}{{else}}echo{{end}}'
  CAT: '{{if eq .D ""}}true{{else}}cat{{end}}'
  OS: '{{OS}}'
  ARCH: '{{ARCH}}'

tasks:

  prereq:
    desc: check requirements before starting the setup
    cmds:
      - test -n "$REGISTRY_TOKEN" || die "please configure docker registry credentials using 'nuv ent config license'"
      - config REGISTRY_PREREQ_OK="true"
    status:
    - config REGISTRY_PREREQ_OK
  
  devcluster:
    silent: true
    cmds:
    - |
      if {{.__status}}
      then  {{.RUN}} nuv setup docker status
      elif  {{.__uninstall}}
      then  {{.RUN}} nuv setup docker delete
      else
          {{.RUN}} nuv ent setup prereq
          {{.RUN}} nuv setup docker create         
          {{.RUN}} nuv ent setup kubernetes create
          {{.RUN}} nuv setup nuvolaris login
          config STATUS_LAST=devcluster
      fi

  cluster:
    silent: true
    cmds:
    - |
      if {{.__status}}
      then  {{.RUN}} nuv ent setup kubernetes status CONTEXT="{{._context_}}"
      elif  {{.__uninstall}}
      then  {{.RUN}} nuv ent setup kubernetes delete CONTEXT="{{._context_}}"
      else
            {{.RUN}} nuv ent setup prereq
            {{.RUN}} nuv ent setup kubernetes create CONTEXT="{{._context_}}"
            {{.RUN}} nuv setup nuvolaris login
            config STATUS_LAST=cluster 
            if test -n "{{._context_}}" 
            then config STATUS_CONTEXT="{{._context_}}"
            fi
      fi

  server:
    silent: true
    cmds:
    - |
      if {{.__status}}
      then {{.RUN}} nuv cloud k3s status SERVER="{{._server_}}" USERNAME="{{._user_}}"
      elif {{.__uninstall}}
      then  {{.RUN}} nuv cloud k3s delete SERVER="{{._server_}}" USERNAME="{{._user_}}"
      else
          {{.RUN}} nuv ent setup prereq
          {{.RUN}} nuv cloud k3s create SERVER="{{._server_}}" USERNAME="{{._user_}}"
          {{.RUN}} nuv ent setup kubernetes create
          {{.RUN}} nuv setup nuvolaris login
          config STATUS_LAST=server STATUS_SERVER="{{._server_}}"
          if test -n "{{._user_}}"
          then config STATUS_USERNAME="{{._user_}}"
          fi   
      fi

  status:
    silent: true
    cmds: 
      - |
        case "$STATUS_LAST" in 
        (devcluster) {{.RUN}} nuv ent setup devcluster --status ;;
        (cluster)    {{.RUN}} nuv ent setup cluster "$STATUS_CONTEXT" --status ;;
        (server)     {{.RUN}} nuv ent setup server "$STATUS_SERVER" "$STATUS_USERNAME" --status ;; 
        (*) echo nothing installed yet
        esac

  uninstall:
    silent: true
    cmds: 
      - |
        case "$STATUS_LAST" in 
        (devcluster) 
                    {{.RUN}} nuv ent setup devcluster --uninstall
                    config -r STATUS_LAST
        ;;
        (cluster)   
                    if test -n "$STATUS_CONTEXT" 
                    then 
                        {{.RUN}} nuv ent setup cluster "$STATUS_CONTEXT" --uninstall
                        config -r STATUS_CONTEXT
                    else
                        {{.RUN}} nuv ent setup cluster --uninstall
                    fi
                    config -r STATUS_LAST
        ;;
        (server)    
                    if test -z "$STATUS_USERNAME"
                    then 
                          {{.RUN}} nuv ent setup server "$STATUS_SERVER" --uninstall
                    else
                          {{.RUN}} nuv ent setup server "$STATUS_SERVER" "$STATUS_USERNAME" --uninstall
                          config -r STATUS_USERNAME
                    fi
                    config -r STATUS_LAST STATUS_SERVER 
        ;; 
        (*) echo nothing installed yet
        esac