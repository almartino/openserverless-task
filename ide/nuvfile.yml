version: '3'

vars:
  FL: ""

tasks:

  setup:
    silent: true
    desc: setup nuvolaris.dev ide
    cmds:
    - |
      clear
      while ! test -e ~/.wskprops
      do nuv ide login
      done
      echo "**************************************************************************************"
      echo "*** Type 'deploy' to deploy your app to https://$NUVDEV_USERNAME.nuvolaris.dev"
      echo "*** Type 'devel'  to start incremental development mode"
      echo "*** Type 'login'  to login again"
      echo "**************************************************************************************"

  login:
    silent: true
    desc: login in nuvolaris.dev with Azure OpenAI access
    cmds:
    - |
      echo "*** Configuring Access to nuvolaris.dev with Azure OpenAI ***"
      echo -n "Enter Username: "
      read NUVDEV_USERNAME
      if nuv -login https://nuvolaris.dev "$NUVDEV_USERNAME"
      then
          config NUVDEV_USERNAME=$NUVDEV_USERNAME
          config NUVDEV_HOST="https://$NUVDEV_USERNAME.nuvolaris.dev"
          source ~/.wskprops
          config OPENAI_API_HOST=https://openai.nuvolaris.io
          config OPENAI_API_KEY="$(echo "$AUTH" | awk -F: '{print $1 }')"
      fi

  serve:
    silent: true
    desc: local web server
    ignore_error: true
    cmds:
    - bash http-serve.sh "$NUV_PWD/web"

  cli:
    silent: true
    desc: python cli
    cmds:
    - |
      find "$NUV_PWD" -name requirements.txt -execdir pip install -r {} \;
      set -a ; source "$NUV_PWD/.env"
      ipython -i init.ipy

  _info:
    silent: true
    #desc: info
    cmds:
    - config -d | grep OPENAI_
    - config -d | grep NUVDEV_

  deploy:
    silent: true
    desc: deploy a project or a single action (with A=<dir-or-file>)
    cmds:
      - |
        set -a ; source $NUV_PWD/.env
        if test -z "{{.A}}"
        then python -m deploy "$NUV_PWD" -d {{.FL}}
        else python -m deploy "$NUV_PWD" -s "{{.A}}" {{.FL}}
        fi

  devel:
    silent: true
    desc: start interactive development mode files
    cmds:
      - |
        set -a ; source $NUV_PWD/.env
        python -m deploy "$NUV_PWD" -w {{.FL}}

  _zip:
    #desc: build an action enviroment zip file (A=action)
    silent: true
    requires: { vars: [A]}
    cmds:
    - |
      cd $NUV_PWD
      if test -e "packages/{{.A}}/requirements.txt"
      then nuv ide python zip DIR="$(realpath "packages/{{.A}}")"
      elif test -e "packages/{{.A}}/package.json"
      then nuv ide nodejs zip DIR="$(realpath "packages/{{.A}}")"
      else echo "no zip environemnt"
      fi

  _action:
    #desc: build an action filling its zip file 
    silent: true
    requires: { vars: [A]}
    cmds:
    - |
      cd $NUV_PWD
      if test -e "packages/{{.A}}/__main__.py"
      then nuv ide python action DIR="$(realpath "packages/{{.A}}")"
      elif test -e "packages/{{.A}}/index.js"
      then nuv ide nodejs action DIR="$(realpath "packages/{{.A}}")"
      else die "*** unknow action type"
      fi

  _clean:
    #desc: clean an action build
    silent: true
    requires: { vars: [A]}
    cmds:
    - |
      cd $NUV_PWD
      if test -d "packages/{{.A}}/virtualenv"
      then nuv ide python clean DIR="$(realpath "packages/{{.A}}")"
      elif test -d "{{.A}}/node_modules"
      then nuv ide nodejs clean DIR="$(realpath "packages/{{.A}}")"
      else echo "nothing to clean"
      fi

  undeploy:
    desc: undeploy all the actions
    silent: true
    cmds:
    - >
      nuv action list
      | awk  'NR>1 { print $1}' 
      | while read action ;
      do nuv action delete "$action" ;
      done
    - >
      nuv package list
      | awk  'NR>1 { print $1}'
      | while read package ;
      do nuv package delete "$package" ;
      done

 